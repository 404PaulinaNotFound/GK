<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="UTF-8">
<title>CPSC 424, Lab 2, Exercise 1</title>
<style>
    body {
        background-color: #DDDDDD;
    }
    canvas {
        background-color: white;
        display: block;
    }
    #canvasholder {
        border:2px solid black;
        float: left; 
    }
</style>
<script>
    "use strict";  
    var canvas;   
    var graphics;  
    var pixelSize; 
     function draw() {
    graphics.clearRect(0, 0, 600, 600);
    
    // Rysowanie tła
    graphics.fillStyle = "#87CEEB";
    graphics.fillRect(0, 0, 600, 600);
    
    // Rysowanie szerszego księżyca
    // Rysowanie szerszego księżyca z czarnym obrysem
    graphics.fillStyle = "yellow";
    graphics.beginPath();
    graphics.fillOval(200, 200, 160, 160); // Szersza główna część księżyca
    graphics.strokeStyle = "black";
    graphics.lineWidth = 3;
    graphics.strokeOval(200, 200, 160, 160); // Obrys księżyca
    
    // Maskowanie drugiej połowy księżyca
    graphics.fillStyle = "#87CEEB";
    graphics.fillOval(130, 170, 130, 130);
    graphics.strokeStyle = "black";
    graphics.lineWidth = 3;
    graphics.strokeOval(130, 170, 130, 130);

    graphics.fillStyle = "#87CEEB";
    graphics.fillOval(100, 157, 130, 130); 
    
    // Rysowanie oczu na półksiężycu
    graphics.fillStyle = "white";
    graphics.fillOval(280, 200, 10, 10); // Lewe oko
    graphics.fillOval(330, 200, 10, 10); // Prawe oko
    
    graphics.fillStyle = "black";
    graphics.fillOval(280, 200, 5, 5); // Lewe oko
    graphics.fillOval(330, 200, 5, 5); // Prawe oko

    graphics.fillStyle = "white";
    graphics.fillOval(278, 198, 2, 2); // Lewe oko
    graphics.fillOval(328, 198, 2, 2); // Prawe oko
    
    // uśmiech 
    graphics.fillStyle = "black";
        graphics.beginPath();
        graphics.moveTo(245, 260); // Początek uśmiechu
        graphics.quadraticCurveTo(280, 280, 315, 260); // Krzywa w dół
        graphics.arc(280, 260, 35, 0, Math.PI, false); // Zamknięcie dolnej części uśmiechu
        graphics.fill();

    // Rysowanie zębów (białe prostokąty)
    graphics.fillStyle = "white";
    graphics.fillRect(272, 269, 8, 10); // Lewy ząb
    graphics.fillRect(280, 269, 8, 10); // Prawy ząb
    
    graphics.beginPath();
    graphics.moveTo(280, 269);
    graphics.lineTo(280, 279);
    graphics.strokeStyle = "black"; // Kolor linii
    graphics.lineWidth = 1; // Grubość linii
    graphics.stroke(); // Rysowanie linii

}
    function applyWindowToViewportTransformation(left,right,bottom,top,preserveAspect) {
        var displayAspect, windowAspect;
        var excess;
        var pixelwidth, pixelheight;
        if (preserveAspect) {
            displayAspect = Math.abs(canvas.height / canvas.width);
            windowAspect = Math.abs(( top-bottom ) / ( right-left ));
            if (displayAspect > windowAspect) {
                excess = (top-bottom) * (displayAspect/windowAspect - 1);
                top = top + excess/2;
                bottom = bottom - excess/2;
            }
            else if (displayAspect < windowAspect) {
                excess = (right-left) * (windowAspect/displayAspect - 1);
                right = right + excess/2;
                left = left - excess/2;
            }
        }
        graphics.scale( canvas.width / (right-left), canvas.height / (bottom-top) );
        graphics.translate( -left, -top );
        pixelwidth =  Math.abs(( right - left ) / canvas.width);
        pixelheight = Math.abs(( bottom - top ) / canvas.height);
        pixelSize = Math.max(pixelwidth,pixelheight);
    }  
    function addGraphicsContextExtras(graphics) {
        graphics.strokeLine = function(x1,y1,x2,y2) {
           this.beginPath();
           this.moveTo(x1,y1);
           this.lineTo(x2,y2);
           this.stroke();
        }
        graphics.fillCircle = function(x,y,r) {
           this.beginPath();
           this.arc(x,y,r,0,2*Math.PI,false);
           this.fill();
        }
        graphics.strokeCircle = function(x,y,radius) {
           this.beginPath();
           this.arc(x,y,radius,0,2*Math.PI,false);
           this.stroke();
        }
        graphics.fillPoly = function() { 
            if (arguments.length < 6)
               return;
            this.beginPath();
            this.moveTo(arguments[0],arguments[1]);
            for (var i = 2; i+1 < arguments.length; i = i + 2) { 
               this.lineTo(arguments[i],arguments[i+1]);
            }
            this.closePath();
            this.fill();
        }
        graphics.strokePoly = function() { 
            if (arguments.length < 4)
               return;
            this.beginPath();
            this.moveTo(arguments[0],arguments[1]);
            for (var i = 2; i+1 < arguments.length; i = i + 2) { 
               this.lineTo(arguments[i],arguments[i+1]);
            }
            this.closePath();
            this.stroke();
        }
        graphics.fillOval = function(x,y,horizontalRadius,verticalRadius) {
           this.save();
           this.translate(x,y);
           this.scale(horizontalRadius,verticalRadius);
           this.beginPath();
           this.arc(0,0,1,0,2*Math.PI,false);
           this.restore();
           this.fill();
        }
        graphics.strokeOval = function(x,y,horizontalRadius,verticalRadius) {
           this.save();
           this.translate(x,y);
           this.scale(horizontalRadius,verticalRadius);
           this.beginPath();
           this.arc(0,0,1,0,2*Math.PI,false);
           this.restore();
           this.stroke();
        }
        graphics.getRGB = function(x,y) {
            var color = this.getImageData(x,y,1,1);
            return color.data;
        }
    }    
    function init() {
        try {
            canvas = document.getElementById("canvas");
            graphics = canvas.getContext("2d");
        } catch(e) {
            document.getElementById("canvasholder").innerHTML =
               "Canvas graphics is not supported.<br>" +
               "An error occurred while initializing graphics.";
        }
        addGraphicsContextExtras(graphics);
        draw();  
    }
</script>
<body onload="init()"> 
<h2>CS 424, Lab 2, Exercise 1</h2>
<noscript>
<p>JavaScript is required to use this page.</p>
</noscript>
<div id="canvasholder">
<canvas id="canvas" width="600" height="600">
   
Canvas not supported.
</canvas>
</div>
</script></body></html>